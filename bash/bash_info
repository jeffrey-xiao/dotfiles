#!/usr/bin/env bash

trim() {
  awk '{$1=$1};1'
}

__title() {
  echo '\033]0;\u@\h:\w\007'
}

__path_info() {
  echo '\w'
}

__short_path_info() {
  echo '\W'
}

__git_info() {
  # Git not found.
  [ -x "$(command -v git)" ] || return

  # Force git output in English to make our work easier.
  local git_eng='env LANG=C git'

  # Get current branch name or short SHA1 hash for detached head.
  local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"

  # Git branch not found.
  [ -n "$branch" ] || return

  $git_eng status &>/dev/null || return

  local marks
  local status=$($git_eng status --porcelain 2>/dev/null)

  local all="$(printf '%s' "$status" | grep --count "^.*$"| trim)"
  local unstaged="$(printf '%s' "$status" | grep --count "^ \\w" | trim)"
  local uncommited="$(printf '%s' "$status" | grep --count "^\\w\\(\\w\\|\\s\\)" | trim)"
  local untracked="$((all - unstaged - uncommited))"
  local stat="$($git_eng status --porcelain --branch | grep '^##' | grep --only-matching '\[.\+\]$')"
  local ahead="$(echo "$stat" | grep --only-matching 'ahead [[:digit:]]\+' | grep --only-matching '[[:digit:]]\+')"
  local behind="$(echo "$stat" | grep --only-matching 'behind [[:digit:]]\+' | grep --only-matching '[[:digit:]]\+')"

  [ "$untracked" -eq '0' ] || marks+=" $GIT_UNTRACKED_SYMBOL$untracked"
  [ "$unstaged" -eq '0' ] || marks+=" $GIT_UNSTAGED_SYMBOL$unstaged"
  [ "$uncommited" -eq '0' ] || marks+=" $GIT_UNCOMMITED_SYMBOL$uncommited"
  [ -n "$ahead" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$ahead"
  [ -n "$behind" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behind"

  echo "$branch$marks"
}

__venv_info() {
  # virtualenv not installed.
  [ -x "$(command -v virtualenv)" ] || return

  # venv not found.
  [ -z ${VIRTUAL_ENV+x} ] && return
  version=$(python --version | cut --delimiter=' ' --fields=2-)
  echo "${VIRTUAL_ENV##*/} v$version"
}

__nvm_info() {
  # nvm not installed.
  type -t nvm > /dev/null || return

  version=$(nvm current)
  # nvm using system.
  [ "$version" = 'system' ] && return
  echo "nvm $version"
}

__is_ssh() {
  [ -n "$SSH_CONNECTION" ] || [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]
}
