#!/bin/sh

config_dir=${XDG_CONFIG_HOME:-"$HOME/.config"}

__trim() {
  awk '{$1=$1};1'
}

__title() {
  echo '\033]0;\u@\h:\w\007'
}

__path_info() {
  echo '\w'
}

__git_info() {
  # Git not found.
  [ -x "$(command -v git)" ] || return

  # Force git output in English to make our work easier.
  git_eng='env LANG=C git'

  # Get current branch name or short SHA1 hash for detached head.
  branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"

  # Git branch not found.
  [ -n "$branch" ] || return

  status=$($git_eng status --porcelain 2>/dev/null)

  all="$(printf '%s' "$status" | grep --count "^.*$" | __trim)"
  unstaged="$(printf '%s' "$status" | grep --count '^ \w' | __trim)"
  uncommited="$(printf '%s' "$status" | grep --count '^\w\(\w\|\s\)' | __trim)"
  untracked="$((all - unstaged - uncommited))"
  stat="$($git_eng status --porcelain --branch | grep '^##' | grep --only-matching '\[.\+\]$')"
  ahead="$(echo "$stat" | grep --only-matching 'ahead [[:digit:]]\+' | grep --only-matching '[[:digit:]]\+')"
  behind="$(echo "$stat" | grep --only-matching 'behind [[:digit:]]\+' | grep --only-matching '[[:digit:]]\+')"

  [ "$untracked" -eq '0' ] || marks="$marks $GIT_UNTRACKED_SYMBOL$untracked"
  [ "$unstaged" -eq '0' ] || marks="$marks $GIT_UNSTAGED_SYMBOL$unstaged"
  [ "$uncommited" -eq '0' ] || marks="$marks $GIT_UNCOMMITED_SYMBOL$uncommited"
  [ -n "$ahead" ] && marks="$marks $GIT_NEED_PUSH_SYMBOL$ahead"
  [ -n "$behind" ] && marks="$marks $GIT_NEED_PULL_SYMBOL$behind"

  echo "$branch$marks"
}

__venv_info() {
  # virtualenv not installed.
  [ -x "$(command -v virtualenv)" ] || return

  # venv not found.
  [ -z "$VIRTUAL_ENV" ] && return
  version=$(python --version | cut --delimiter=' ' --fields=2-)
  echo "${VIRTUAL_ENV##*/} v$version"
}

__is_ssh() {
  [ -n "$SSH_CONNECTION" ] || [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]
}

__prompt() {
  ps1() {
    # Check the exit code of the previous command and display different
    # colors in the prompt accordingly.
    if [ $? -eq 0 ]; then
      FG_EXIT="$FG_COLOR_2"
    else
      FG_EXIT="$FG_COLOR_1"
    fi

    PS1="$(__title)\\n"

    git_info="$(__git_info)"
    venv_info="$(__venv_info)"

    # Path info.
    if [ "$(id -u)" -eq 0 ]; then
      path_color="$FG_COLOR_4"
    else
      path_color="$FG_COLOR_3"
    fi

    if __is_ssh; then
      path_info="$USER$RESET@$path_color$(uname -n)$RESET:$path_color$(__path_info)"
    else
      path_info="$(__path_info)"
    fi

    PS1="$PS1$path_color$path_info$RESET"

    # Git info.
    [ -n "$git_info" ] && PS1="$PS1 on $RESET$FG_COLOR_3$git_info$RESET"

    # Environment info.
    existing_info=false
    [ -n "$venv_info" ] && PS1="$PS1 with"
    for info in "$venv_info"; do
      [ -z "$info" ] && continue
      [ "$existing_info" = true ] && PS1="$PS1,"
      PS1="$PS1 $FG_COLOR_3$info$RESET"
      existing_info=true
    done

    PS1="$PS1\\n$FG_EXIT» $RESET"
    PS2="$FG_EXIT» $RESET"
  }
  . "$config_dir/bash/bash_formatting"
  PROMPT_COMMAND=ps1
}

__prompt
unset __prompt
