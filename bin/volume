#!/bin/sh

set -euo pipefail

__help="Usage: ${0##*/} [OPTIONS] [SUBCOMMAND]

Increase, decrease, toggle, or set the volume. If no subcommand is supplied,
then status is run by default.

Options:
  -h, --help     display this help and exit

Subcommands:
  inc PERCENT    increase the volume by a percent
  dec PERCENT    decrease the volume by a percent
  set PERCENT    set the volume to a percent
  toggle         toggle the volume mute state
  status         print the current brightness"

check_no_positionals() { [ -z "$*" ] || { echo "Error: unexpected positional arguments: $*." && exit 1; } }

amixer_info=$(amixer sget Master)
left=$(echo "$amixer_info" | grep 'Left:' | awk --field-separator='[][]' '{ print $2 }')
left=${left%\%}
right=$(echo "$amixer_info" | grep 'Right:' | awk --field-separator='[][]' '{ print $2 }')
right=${right%\%}

sub_status() {
  check_no_positionals "$@"
  volume=$(((left + right) * 100 / 200))
  if echo "$amixer_info" | grep --silent '\[on\]'; then
    echo "$volume%"
  else
    echo "$volume% muted"
  fi
}

sub_inc() {
  [ -z "$1" ] && { echo "Error: subcommand inc requires PERCENT." && exit 1; }
  delta="$1"
  shift
  check_no_positionals "$@"

  amixer -D pulse set Master "${delta#+}%+" 1>/dev/null
}

sub_dec() {
  [ -z "$1" ] && { echo "Error: subcommand inc requires PERCENT." && exit 1; }
  delta="$1"
  shift
  check_no_positionals "$@"

  amixer -D pulse set Master "${delta#-}%-" 1>/dev/null
}

sub_set() {
  [ -z "$1" ] && { echo "Error: subcommand set requires PERCENT." && exit 1; }
  percent="$1"
  shift
  check_no_positionals "$@"

  amixer -D pulse set Master "$percent%" 1>/dev/null
}

sub_toggle() {
  check_no_positionals "$@"
  amixer -D pulse set Master 0+ toggle 1>/dev/null
}

sub="$1"
[ "$sub" = '-h' ] || [ "$sub" = '--help' ] && { echo "$__help" && exit 0; }
[ -z "$sub" ] && { sub_status "$@" && exit 0; }
[ "$(command -v "sub_$sub")" ] || { printf "Error: unknown subcommand: %s.\\n\\n%s\\n" "$sub" "$__help" && exit 1; }
shift
"sub_$sub" "$@"
