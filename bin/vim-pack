#!/bin/sh

__help="Usage: ${0##*/} [OPTIONS] [SUBCOMMAND]

Manage Vim8 packages.

Options:
  -h, --help     display this help and exit

Subcommands:
  add GIT_URL                add package
  remove PACKAGE             remove package
  update PACKAGE             update package
  opt {add,remove,update}    runs {add,remove,update}, but for an optional package
  update_all                 update all packages"

check_no_positionals() { [ -z "$*" ] || { echo "Error: unexpected positional arguments: $*." && exit 1; } }

sub_add() {
  [ -z "$1" ] && { echo "Error: subcommand set requires GIT_URL." && exit 1; }
  git_url="$1"
  shift
  check_no_positionals "$@"

  git submodule add --depth=1 $git_url
}

sub_remove() {
  [ -z "$1" ] && { echo "Error: subcommand set requires GIT_URL." && exit 1; }
  package="$1"
  shift
  check_no_positionals "$@"

  git_folder=$(cat $package/.git)
  git_folder="${git_folder:8}"

  git submodule deinit --force -- $package
  /bin/rm -rf "$package/$git_folder"
  git rm -f $package
}

sub_update() {
  [ -z "$1" ] && { echo "Error: subcommand set requires PACKAGE." && exit 1; }
  package="$1"
  shift
  check_no_positionals "$@"

  git submodule update --depth=1 --remote $package
}

sub_update_all() {
  check_no_positionals "$@"
  git submodule update --depth=1 --remote
}

dir="$HOME/.vim/pack/plugins/start/"
sub="$1"
[ "$sub" = '-h' ] || [ "$sub" = '--help' ] && { echo "$__help" && exit 0; }
if [ "$sub" = 'opt' ]; then
  shift
  dir="$HOME/.vim/pack/plugins/opt/"
  sub="$1"
else 
  cd 
fi
[ -z "$sub" ] && { printf "Error: missing subcommand.\\n\\n%s\\n" "$__help" && exit 0; }
[ "$(command -v "sub_$sub")" ] || { printf "Error: unknown subcommand: %s.\\n\\n%s\\n" "$sub" "$__help" && exit 1; }
shift
mkdir -p $dir
cd $dir
"sub_$sub" "$@"
