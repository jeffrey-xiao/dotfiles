[user]
  email = jeffrey.xiao1998@gmail.com
  name = Jeffrey Xiao

[core]
  excludesfile = ~/.config/git/ignore
  editor = vim

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.).
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  # Meta information.
  meta = yellow bold
  # Hunk header.
  frag = cyan bold
  # Removed lines.
  old = red
  # Added lines.
  new = green

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[help]
  # Automatically correct and execute mistyped commands.
  autocorrect = 1

[apply]
  # Detect whitespace errors when applying a patch.
  whitespace = fix

[log]
  abbrevCommit = true
  follow = true

[commit]
  verbose = true

[push]
  default = simple
  followTags = true

[merge]
  # Includes summaries of merged commits in newly created merge commit messages.
  log = true

[rebase]
  autoSquash = true

[alias]
  # Log.
  l = log --graph
  ls = log --pretty=oneline
  lp = log --graph --patch

  # Diff.
  d = diff
  dc = diff --cached
  di = !"f() { git diff HEAD~$1; }; f"
  ds = diff --stat

  # Status.
  s = status
  si = status --ignored
  ss = status --short

  # Index.
  a = add
  aa = add --all
  au = add --update
  ap = add --patch
  ai = add --interactive

  # Commit.
  c = commit --verbose
  cf = commit --verbose --fixup
  cs = commit --verbose --squash
  ca = commit --verbose --amend
  can = commit --verbose --amend --no-edit

  # Checkout.
  co = checkout
  cob = checkout -b

  # Branch.
  b = branch
  bc = branch --contains
  bd = branch --delete --force
  bv = branch --verbose
  ba = branch --verbose --all

  # Tag.
  t = tag
  tc = tag --contains
  td = tag --delete
  ta = tag --list

  # Network (in).
  cl = clone --recursive
  pl = pull
  f = fetch

  # Network (out).
  ps = push
  psf = push --force

  # Submodule.
  sub = submodule
  subu = submodule update --init --recursive --force

  # Merge.
  m = merge
  ma = merge --abort
  mc = merge --continue
  mff = merge --ff-only

  # Rebase.
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  rbq = rebase --quit
  rbs = rebase --skip

  # Interactive rebase.
  rbi = rebase --interactive
  rbii = !"f() { git rebase --interactive HEAD~$1; }; f"

  # Cherry-pick.
  cp = cherry-pick
  cpa = cherry-pick --abort
  cpc = cherry-pick --continue
  cpq = cherry-pick --quit

  # Revert.
  rv = revert
  rva = revert --abort
  rvs = revert --continue
  rvq = revert --quit

  # Reset.
  rs = git reset
  rss = git reset --soft
  rsh = git reset --hard

  # w-commands.
  which-branch = branch --all --contains
  which-tag = describe --always --contains

  mr = !"f() { git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2; }; f"
  pr = !"f() { git fetch $1 pull/$2/head:pr-$1-$2 && git checkout pr-$1-$2; }; f"

[github]
  user = jeffrey-xiao
[credential "https://github.com"]
  username = jeffrey-xiao

[gitlab]
  user = jeffrey-xiao
[credential "https://gitlab.com"]
  username = jeffrey-xiao

[url "ssh://git@github.com/"]
  insteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
  insteadOf = https://gitlab.com/
[url "ssh://git@bitbucket.org/"]
  insteadOf = https://bitbucket.org/
