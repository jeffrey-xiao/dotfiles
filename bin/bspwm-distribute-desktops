#!/bin/sh

set -eu

__help="Usage: ${0##*/} [OPTIONS]

Evenly distribute a series of named bwpsm desktops across all active monitors.
If the number of desktops does not match the number of expected desktops, then
reinitialize all desktops for all monitors.

Options:
  -h, --help    this help and exit

Positional Arguments:
  DESKTOPS      ordered list of desktop names to distribute"

while [ ! $# -eq 0 ]; do
  case "$1" in
    -h | --help)
      echo "$__help"
      exit 0
      ;;
    *)
      break;
      ;;
  esac
  shift
done

desktop_count=$#
monitors=$(
  xrandr |
    grep '\bconnected\b' |
    sed 's/primary //' |
    cut --fields=1,3 --delimiter=' ' |
    uniq --skip-fields 1 |
    cut --fields=1 --delimiter=' '
)
monitors=$(polybar --list-monitors | cut --delimiter=':' --fields=1)
monitor_count=$(echo "$monitors" | wc -l)
initial_desktop_count="$(bspc query --desktops | wc -l)"

q=$((desktop_count / monitor_count))
r=$((desktop_count % monitor_count))
total=0
for curr_monitor in $monitors; do
  curr=$q
  if [ $r -gt 0 ]; then
    curr=$((curr + 1))
    r=$((r - 1))
  fi

  # Move desktops.
  for i in $(seq $((total + 1)) $((total + curr))); do
    eval desktop="\${$i}"
    bspc desktop "$desktop" --to-monitor "$curr_monitor" || true
  done
  total=$((total + curr))
done

q=$((desktop_count / monitor_count))
r=$((desktop_count % monitor_count))
total=0
for curr_monitor in $monitors; do
  curr=$q
  if [ $r -gt 0 ]; then
    curr=$((curr + 1))
    r=$((r - 1))
  fi

  # Reset desktops.
  desktops=""
  for i in $(seq $((total + 1)) $((total + curr))); do
    eval desktop="\${$i}"
    if [ -z "$desktops" ]; then
      desktops="$desktop"
    else
      desktops="$desktops $desktop"
    fi
  done
  if [ "$initial_desktop_count" -ge "$desktop_count" ]; then
    bspc monitor "$curr_monitor" --reorder-desktops $desktops
    bspc monitor "$curr_monitor" --reset-desktops $desktops
  else
    bspc monitor "$curr_monitor" --reset-desktops $desktops
  fi
  total=$((total + curr))
done
