#!/bin/sh

set -euo pipefail

__help="Usage: ${0##*/} [OPTIONS]

Take a screencast.

Options:
  -h, --help           display this help and exit
  -o, --output FILE    the name of the output file
  -s, --select         select an area of the screen to take a screencast of
  -v, --voice          record microphone instead of device audio"

unset output
unset select
unset voice

check_argument() { [ $# -ge 2 ] || { echo "Error: flag $1 requires an argument." && exit 1; } }

while [ ! $# -eq 0 ]; do
  case "$1" in
    -h | --help)
      echo "$__help"
      exit 0
      ;;
    -s | --select)
      select=1
      ;;
    -v | --voice)
      voice=1
      ;;
    -o | --output)
      check_argument "$@"
      output=$2
      shift
      ;;
    *)
      break;
      ;;
  esac
  shift
done

[ -z "$*" ] || { echo "Error: unexpected positional arguments: $*." && exit 1; }

output=${output:-${XDG_VIDEOS_DIR:-"$HOME/Videos"}/$(date +%s).mp4}
sound_index=0
microphone_index=29

if pgrep --exact ffmpeg; then
  pkill --exact -INT ffmpeg
  notify-send --urgency=low 'Stopped video recording'
  exit 0
fi

if [ -z ${select:-} ]; then
  # Record entire desktop.
  dimensions=$(xdpyinfo | awk '/dimensions/{print $2}')
  offset="0,0"
  notify-send --urgency=low 'Started video recording (desktop)'
else
  # Record area.
  slop=$(slop --format '%wx%h %x,%y') || exit 1
  dimensions=$(echo "$slop" | cut --delimiter=' ' --fields=1)
  offset=$(echo "$slop" | cut --delimiter=' ' --fields=2)
  notify-send --urgency=low 'Started video recording (area)'
fi

if [ -z ${voice:-} ]; then
  input=$sound_index
else
  input=$microphone_index
fi

ffmpeg -f x11grab -s "$dimensions" -i :0.0+"$offset" -f pulse -i $input "$output"
